<?php
  /*****************************************************************************
   * This module connects to Google Analytics and filters the tracking
   * data for consumption by the node_counter table.
   *
   * @author
   * 	John P Warren
   * @version
   * 	0.8beta
   ****************************************************************************/
   
   /**
    * Hook menu
    * 
    * @return
    *   $items, an array of the menu items
    */
   function ga_importer_menu(){
      $items['admin/settings/ga-importer'] = array(
	'title' => 'Google Analytics Importer',
	'access callback' => 'user_access',
	'access arguments' => array('administer ga importer'),
	'page callback' => drupal_get_form,
	'page arguments' => array('ga_importer_form'),
	'type' => MENU_NORMAL_ITEM,
      );
      return $items;
    }
	
    /**
     * Hook perm
     */
    function ga_importer_perm(){
      return array('administer ga importer');
    }
    
    /**
     * Hook help
     * @todo
     * 	write this hook
     */
    
    /**
     * Administrative form
     * @return
     *  $form, an array containing the FAPI data
     */
    function ga_importer_form(){
      $form['ga_importer']['admin'] = array(
	'#type' => 'fieldset',
	'#title' => t('Basic Google Analytics Settings'),
	'#collapsed' => FALSE,
	'#weight' => 0,
	'#description' => t('Here you can configure the basic settings of the Google Analytics importer.'),
      );
      $form['ga_importer']['admin']['frequency']['values'] = array(
	'on_cron' => 'Every Cron Run',
	'on_node_load' => 'Each time a page is visited',
      );
      $form['ga_importer']['admin']['frequency'] = array(
	'#type' => 'radios',
	'#title' => t('Frequency of data update'),
	'#options' => $form['ga_importer']['admin']['frequency']['values'],
	'#weight' => 1,
	'#description' => t('Set the frequency which the site checks Google Analytics to update the node_counter tables.'),
	'#default_value' => variable_get('ga_importer_frequency', 'on_cron')
      );
      $form['ga_importer']['admin']['proportion'] = array(
	'#type' => 'textfield',
	'#title' => t('Amount of nodes to update on each frequency event.'),
	'#default_value' => '1%',
	'#weight' => 2,
	'#description' => t('Enter the number of nodes to update or a percentage(as in 99%) of all nodes to update on each frequency event.'),
      );
      $form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Save')
      );
      return $form;
    }
    
    /**
     * Administrative form validate
     *
     * @param
     * 	$form, array
     * 	$form_state, array passed by reference
     */
    function ga_importer_form_validate($form, &$form_state){
      if ( !is_numeric($form_state['values']['proportion']) && preg_match('/(\d+)%/', $form_state['values']['proportion']) == 0 ){
	form_set_error('', t('Please enter only a number of nodes to process or a percentage to process'));
      }
    }
    
    /**
     * Administrative form submit
     *
     * @param
     * 	$form, array
     * 	$form_state, array passed by reference
     */
    function ga_importer_form_submit($form, &$form_state){
      if($form_state['values']['frequency'] != ''){
	variable_set('ga_importer_frequency', $form_state['values']['frequency']);
      }
      if($form_state['values']['proportion'] != ''){
	variable_set('ga_importer_proportion', $form_state['values']['proportion']);
      }
      drupal_set_message(t('Settings saved!'), 'status');
    }
    
    /**
     * Function to parse the URL 'src' to determine the node
     * 
     * @param
     *  $url, a string containing the url from Google Analytics API
     * @return
     *  $nid, an integer which is the node ID 
     */
    function parse_url_for_nid($ga_url){
      
      $url = preg_replace('/^\//', '', $ga_url);
      if( is_numeric( str_replace('node/', '', $url)) ){
	$nid = str_replace('node/', '', $url);
	return $nid;
      }
      else{
	$alias2nid_sql = "SELECT src FROM {url_alias} WHERE dst='%s'";
	$node_path = db_result(db_query($alias2nid_sql, $url));
	$nid = str_replace('node/', '', $node_path);
	if( is_numeric($nid) ){
	  return $nid;
	}
	else{
	  return FALSE;
	}
      }
    }
    
    /**
     * hook cron
     * 
     * @return
     * 	Void
     */
    function ga_importer_cron(){
      if (variable_get('ga_importer_frequency', 'on_cron') == 'on_cron'){
	preop_ga_import('on_cron');
      }
    }
    
    /**
     * hook node load
     * 
     * @return
     * 	Void
     */
    function ga_importer_load(){
      if (variable_get('ga_importer_frequency', 'on_cron') == 'on_node_load'){
	preop_ga_import('on_node_load');
      }
    }
    
    /**
     * Quick function to find out how many total nodes.
     * 
     * @return
     * 	$count, an integer.
     */
    function count_nodes(){
      $sql = "SELECT nid FROM {node}";
      $data_object = db_query($sql);
      $count = 0;
      while( db_fetch_array($data_object) ){
	$count += 1;
      }
      return $count;
    }
    
    /**
     * This function returns the number of GA results to get based on if the
     * admin settings.
     * 
     * @param
     * 	$proportion, a numeric or percentage value of how many GA elements to
     * 	process on each frequency event.
     * @return
     * 	$max_results, the maximum pages to query GA for
     */
    function process_proportion($proportion){
      if ( preg_match('/(\d+)%/', $proportion) > 0 ){
	$inter = sscanf($proportion, "%d");
	$percent = ($inter[0] / 100);
	$totalnodes = count_nodes();
	$max_results = ($totalnodes * $percent);
      }
      else{
	$max_results = $proportion;
      }
      return $max_results;
    }
    
    /**
     * Function to connect to Google Analytics and retrieve the report object.
     *
     * @param
     * 	$dimensions, array
     * 	$metrics, array
     * 	$sort_metric, array
     * 	$filter, array
     * 	$start_date, array
     * 	$end_date, array
     * 	$start_index, array
     * 	$max_results, array
     * @return
     * 	$analytics, array
     */
    function ga_importer_get_report($dimensions=array('pagePath'), $metrics=array('pageViews','visits'), $sort_metric=null, $filter=null, $start_date=null, $end_date=null, $start_index=null, $max_results=null){
      //$today = date('Y-m-d');


      // Construct request array.
      $request = array(
	'#dimensions' => $dimensions,
	'#metrics' => $metrics,
	'#sort_metric' => $sort_metric,
	'#filter' => $filter,
	'#start_date' => $start_date,
	'#end_date' => $end_date,
	'#start_index' => $start_index,
	'#max_results' => $max_results,
      );
      try {
	$ga = google_analytics_api_report_data($request);
      }
      catch (Exception $e) {
	return $e->getMessage();
      }
  
      $analytics = array();
      foreach ($ga as $entry) {
	$data = array();
	$data = array_merge($data, $entry->getDimensions());
	$data = array_merge($data, $entry->getMetrics());
	$analytics[] = $data;
      }
      return $analytics;
    }
    
    /**
     * This function preprocesses the service call to work within the limits set
     * in the administrative menu.
     *
     * @param
     * 	$op, a string value for setting different import process chains
     * @return
     * 	$status, a boolean for status value
     */
    function preop_ga_import($op, $dimensions=array('pagePath'), $metrics=array('pageViews','visits'), $sort_metric=null, $filter=null, $start_date=null, $end_date=null, $start_index=null, $max_results=null){
      $proportion = variable_get('ga_importer_proportion', '1%');
      $start_index = variable_get('ga_importer_start_index', '0');
      $max_results = process_proportion($proportion);
      
      //run the GAPI functions
      $ga = ga_importer_get_report($dimensions=array('pagePath'), $metrics=array('pageViews','visits'), $sort_metric=null, $filter=null, $start_date=null, $end_date=null, $start_index=null, $max_results=null);
      
      $status = process_ga_data($ga);
      
      //update the start index
      $new_start_index += $max_results;
      if (validate_start_index($new_start_index, $max_results)){
	variable_set('ga_importer_start_index', $new_start_index);
      }
      else{
	variable_set('ga_importer_start_index', '0');
      }
      
      return $status;
    }
    
    /**
     * A function to check if the start index should be reset.
     * 
     * @param
     *   $new_start_index, int.
     *   $max_results, int
     * @return
     *   Boolean
     */
    function validate_start_index($new_start_index, $max_results){
      $max_node_count = count_nodes() + $max_results + $max_results;
      
      if($new_start_index >= $max_node_count){
	return FALSE;
      }
      else{
	return TRUE;
      }
    }
    
    /**
     * This function creates objects for drupal_write_record() based on the data
     * obtained from Google Analytics.
     *
     * @param
     * 	$ga, an array containing the GA results
     * @return
     * 	$status, array containing a listing of successful updates and failures
     */
    function process_ga_data($ga){
      $status = array('node_counter_updates' => 0, 'node_counter_failures' => 0);
      //create final node data array that combines duplicate statistics entries
      $final_data = array();
      
      foreach($ga as $page){
	$page['pagePath'] = parse_url_for_nid($page['pagePath']);

	$inner_match = FALSE;
	$incrementor = 0;

	foreach($final_data as $sub_data){
	  if($page['pagePath'] == $sub_data['pagePath']){
	    $inner_match = TRUE;
	    $final_data[$incrementor]['visits'] += $page['visits'];
	    $final_data[$incrementor]['pageviews'] += $page['pageviews'];
	  }
	  $incrementor ++;
	}
	if(is_numeric($page['pagePath']) && !$inner_match){
	      $final_data[] = $page;
	}
      }
      
      foreach($final_data as $page){
	$node_counter = new stdClass();
	$node_counter->nid = $page['pagePath'];
	$node_counter->totalcount = $page['pageviews'];
	$node_counter->daycount = $page['visits'];
	$node_counter->timestamp = date('U');
	if ( update_node_counter($node_counter) ){
	  $status['node_counter_updates'] ++;
	}
	else{
	  $status['node_counter_failures'] ++;
	}
      }
      watchdog('GA Importer', t('Updated node_counter table with %win successful updates and %fail failed updates', array('%win' => $status['node_counter_updates'], '%fail' => $status['node_counter_failures'])));
      return $status;
    }
    
    /**
     * This function runs the drupal write record and returns TRUE or FALSE on
     * a successful or failed database query.
     *
     * @param
     * 	$node_counte, a data object matching the node_counter table schema
     * @return
     * 	Boolean status value
     */
    function update_node_counter($node_counter){
      if(node_exists($node_counter->nid)){
        $status = drupal_write_record('node_counter', $node_counter, 'nid');
      }
      else{
	$status = drupal_write_record('node_counter', $node_counter);
      }
      if( $status == 1 ){
	return TRUE;
      }
      if( $status == 2 ){
	return TRUE;
      }
      else{
	return FALSE;
      }
    }
    
    /**
     * A quick function to test if a node exists in the 'node_counter' table.
     *
     * @param
     *   $nid, an integer value for the node ID to be scanned for.
     * @return
     *   Boolean.
     */
    function node_exists($nid){
      $sql = "SELECT nid FROM {node_counter} WHERE nid='%s'";
      $result = db_result(db_query($sql, $nid));
      if(empty($result)){
	return FALSE;
      }
      else{
	return TRUE;
      }
    }